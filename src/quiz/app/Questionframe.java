/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package quiz.app;

/**
 *
 * @author o
 * 
 */
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;
public class Questionframe extends javax.swing.JFrame {

    /**
     * Creates new form Questionframe
     */
    private Connection connection;
   private List<String> questionsList = new ArrayList<>();
    private int currentQuestionIndex;
    public Questionframe() {
        initComponents();
//        GetAllQuestions();

//        displayQuestion();
  GetAllQuestionsAndOptions();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        Submitbtn = new javax.swing.JButton();
        questionnbr = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        nextbtn = new javax.swing.JButton();
        option1 = new javax.swing.JRadioButton();
        option2 = new javax.swing.JRadioButton();
        option3 = new javax.swing.JRadioButton();
        option4 = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Submitbtn.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        Submitbtn.setText("Submit");
        Submitbtn.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        Submitbtn.setFocusPainted(false);
        Submitbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubmitbtnActionPerformed(evt);
            }
        });

        questionnbr.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        questionnbr.setText("1-");

        jLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel1.setText("What is the capital of France");

        nextbtn.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        nextbtn.setText("Next");
        nextbtn.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        nextbtn.setFocusPainted(false);
        nextbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextbtnActionPerformed(evt);
            }
        });

        buttonGroup1.add(option1);
        option1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        option1.setFocusPainted(false);

        buttonGroup1.add(option2);
        option2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        option2.setFocusPainted(false);

        buttonGroup1.add(option3);
        option3.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        option3.setFocusPainted(false);

        buttonGroup1.add(option4);
        option4.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        option4.setFocusPainted(false);
        option4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                option4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(questionnbr, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(option4)
                                    .addComponent(option3)
                                    .addComponent(option2)
                                    .addComponent(option1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 436, Short.MAX_VALUE))
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(nextbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(54, 54, 54)
                        .addComponent(Submitbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)))
                .addGap(47, 47, 47))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(questionnbr)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(option1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(option2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(option3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(option4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 138, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nextbtn)
                    .addComponent(Submitbtn))
                .addGap(76, 76, 76))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SubmitbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubmitbtnActionPerformed
        Resultframe rf=new Resultframe();
        this.dispose();
        rf.setVisible(true);
        // TODO add your handling code here:
    }//GEN-LAST:event_SubmitbtnActionPerformed

    private void nextbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextbtnActionPerformed
        // TODO add your handling code here:
          if (!questionsList.isEmpty()) {
            String currentQuestion = questionsList.get(0); // Get the first question
            questionnbr.setText((questionsList.indexOf(currentQuestion) + 1) + "-"); // Set question number label

            // Set the text of the current question to jLabel1
            jLabel1.setText(currentQuestion);

            // Remove the displayed question from the list
            questionsList.remove(0);
        } else {
            // If no more questions, display a message or handle accordingly
//            jLabel1.setText("No more questions!");
               JOptionPane.showMessageDialog(this, "End of questions!");
               
        }
    }//GEN-LAST:event_nextbtnActionPerformed

    private void option4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_option4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_option4ActionPerformed

    /**
     * @param args the command line arguments
     */
    
//  private void displayQuestion()
//  {if (!questionsList.isEmpty()) {
//            String currentQuestion = questionsList.get(currentQuestionIndex);
//            questionnbr.setText((currentQuestionIndex + 1) + "-");
//            jLabel1.setText(currentQuestion);
//            // Here you may reset radio buttons or any other display components
//        } else {
//            // Handle the case when the questions list is empty
//            jLabel1.setText("No questions available.");
//        }
// 
//      
//  }
  
 
  
  private void GetAllQuestionsAndOptions() {
        try {
            connection = DatabaseManager.getConnected();
            String query = "SELECT q.QuestionText, o.OptionText FROM questions q " +
                           "INNER JOIN options o ON q.QuestionID = o.QuestionID";
            PreparedStatement preparedStatement = connection.prepareStatement(query);
            ResultSet resultSet = preparedStatement.executeQuery();

            String currentQuestion = "";
            List<String> options = new ArrayList<>();

            while (resultSet.next()) {
                String questionText = resultSet.getString("QuestionText");
                String optionText = resultSet.getString("OptionText");
                    System.out.print(questionText); 
                    System.out.print(optionText);

                if (!currentQuestion.equals(questionText)) {
                    if (!currentQuestion.isEmpty()) {
//                        displayQuestionWithOptions(currentQuestion, options);
                        options.clear();
                    }
                    currentQuestion = questionText;
                }
                options.add(optionText);
            }

            if (!currentQuestion.isEmpty()) {
//                displayQuestionWithOptions(currentQuestion, options);
            }

            resultSet.close();
            preparedStatement.close();

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
  
  

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Submitbtn;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton nextbtn;
    private javax.swing.JRadioButton option1;
    private javax.swing.JRadioButton option2;
    private javax.swing.JRadioButton option3;
    private javax.swing.JRadioButton option4;
    private javax.swing.JLabel questionnbr;
    // End of variables declaration//GEN-END:variables
}
